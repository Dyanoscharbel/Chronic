import { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useLocation } from 'wouter';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/use-auth';
import { apiRequest } from '@/lib/queryClient';
import {
  ArrowLeft, Edit, Calendar, FileText, AlertCircle,
  PlusCircle, Download, ChevronUp, ChevronDown,
} from 'lucide-react';
import { AutoGenerateDialog } from '@/components/lab-results/auto-generate-dialog';
import { GenerateReport } from '@/components/patient-report/generate-report';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Separator } from '@/components/ui/separator';
import { AvatarName } from '@/components/ui/avatar-name';
import { Loader, PageLoader } from '@/components/ui/loader';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { Patient, PatientLabResult, Appointment, LabTest, Doctor, Workflow } from '@/lib/types';
import {
  getCKDStageColor,
  calculateAge,
  formatDate,
  formatTime,
  getStatusColor,
} from '@/lib/utils';
import { determineProgressionRisk } from '@/lib/ckd-utils';
import { Link } from 'wouter';

interface PatientViewProps {
  id: string;
}

export default function PatientView({ id }: PatientViewProps) {
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { user } = useAuth();

  // Dialog states
  const [addLabResultDialogOpen, setAddLabResultDialogOpen] = useState(false);
  const [addAppointmentDialogOpen, setAddAppointmentDialogOpen] = useState(false);

  // Query for patient data
  const { data: patient, isLoading: patientLoading } = useQuery<Patient>({
    queryKey: [`/api/patients/${id}`],
    enabled: !!id,
    queryFn: async () => {
      if (!id) {
        setLocation('/patients');
        throw new Error('Invalid patient ID');
      }
      const response = await apiRequest('GET', `/api/patients/${id}`);
      return response.data;
    },
  });


  // Si les données sont en cours de chargement, afficher un loader
  if (patientLoading) {
    return (
      <div className="flex flex-col items-center justify-center h-[80vh]">
        <Loader size="lg" />
        <p className="mt-4 text-gray-600">Chargement des données patient...</p>
      </div>
    );
  }

  if (!patient || !patient.user) {
    return (
      <div className="h-full flex flex-col items-center justify-center p-8">
        <AlertCircle className="h-16 w-16 text-red-500 mb-4" />
        <h1 className="text-2xl font-bold text-gray-900 mb-2">Patient introuvable</h1>
        <p className="text-gray-600 mb-4">Le patient que vous recherchez n'existe pas ou a été supprimé.</p>
        <Button onClick={() => setLocation('/patients')}>
          Retour à la liste des patients
        </Button>
      </div>
    );
  }


  const [patientDetailsDialogOpen, setPatientDetailsDialogOpen] = useState(false);
  const [selectedTab, setSelectedTab] = useState('lab-results');

  // Form states
  const [labTestId, setLabTestId] = useState('');
  const [resultValue, setResultValue] = useState('');
  const [resultDate, setResultDate] = useState(new Date().toISOString().split('T')[0]);
  const [appointmentDate, setAppointmentDate] = useState('');
  const [appointmentTime, setAppointmentTime] = useState('');
  const [doctorId, setDoctorId] = useState('');
  const [purpose, setPurpose] = useState('');

  // Set doctor if missing
  useEffect(() => {
    const updateDoctor = async () => {
      if (patient?._id && !patient.doctor && user?.id) {
        try {
          await apiRequest('PUT', `/api/patients/${patient._id}`, {
            doctorId: user.id
          });
          queryClient.invalidateQueries({ queryKey: [`/api/patients/${patient._id}`] });
        } catch (error) {
          console.error('Failed to update doctor:', error);
        }
      }
    };
    updateDoctor();
  }, [patient, user, queryClient]);

  // Fetch lab results
  const { data: labResults, isLoading: labResultsLoading } = useQuery<PatientLabResult[]>({
    queryKey: [`/api/patient-lab-results/patient/${id}`],
    enabled: !!id,
  });

  // Fetch lab tests for context
  const { data: labTests } = useQuery<LabTest[]>({
    queryKey: ['/api/lab-tests'],
    enabled: !!id,
  });

  // Fetch appointments
  const { data: appointments, isLoading: appointmentsLoading } = useQuery<Appointment[]>({
    queryKey: [`/api/appointments/patient/${patient?._id}`],
    enabled: !!patient?._id,
  });

  // Fetch doctors for dropdown
  const { data: doctors } = useQuery<Doctor[]>({
    queryKey: ['/api/doctors'],
  });

  // Fetch workflows
  const { data: workflows } = useQuery<Workflow[]>({
    queryKey: ['/api/workflows'],
  });

  // Mutation for adding lab result
  const addLabResultMutation = useMutation({
    mutationFn: async (newResult: any) => {
      return apiRequest('POST', '/api/patient-lab-results', newResult);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/patient-lab-results/patient/${id}`] });
      toast({
        title: 'Lab result added',
        description: 'Lab result has been added successfully',
      });
      setAddLabResultDialogOpen(false);
      resetLabResultForm();
    },
    onError: (error) => {
      toast({
        title: 'Error',
        description: 'Failed to add lab result: ' + (error as Error).message,
        variant: 'destructive',
      });
    }
  });

  // Mutation for adding appointment
  const addAppointmentMutation = useMutation({
    mutationFn: async (newAppointment: any) => {
      return apiRequest('POST', '/api/appointments', newAppointment);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/appointments/patient/${id}`] });
      toast({
        title: 'Appointment scheduled',
        description: 'The appointment has been scheduled successfully',
      });
      setAddAppointmentDialogOpen(false);
      resetAppointmentForm();
    },
    onError: (error) => {
      toast({
        title: 'Error',
        description: 'Failed to schedule appointment: ' + (error as Error).message,
        variant: 'destructive',
      });
    }
  });


  // Reset forms
  const resetLabResultForm = () => {
    setLabTestId('');
    setResultValue('');
    setResultDate(new Date().toISOString().split('T')[0]);
  };

  const resetAppointmentForm = () => {
    setAppointmentDate('');
    setAppointmentTime('');
    setDoctorId('');
    setPurpose('');
  };

  // Wait for additional data to load
  if (!labTests || !doctors) {
    return (
      <div className="flex flex-col items-center justify-center h-[80vh]">
        <Loader size="lg" />
        <p className="mt-4 text-gray-600">Chargement des données complémentaires...</p>
      </div>
    );
  }

  const stageColors = getCKDStageColor(patient.ckdStage);
  const age = calculateAge(patient.birthDate);
  const progressionRisk = determineProgressionRisk(patient.lastEgfrValue, patient.proteinuriaLevel);

  // Get recent test results
  const recentResults = labResults?.sort((a, b) =>
    new Date(b.resultDate).getTime() - new Date(a.resultDate).getTime()
  ).slice(0, 5);

  // Get test result status
  const getTestStatus = (result: PatientLabResult) => {
    const test = labTests?.find(t => t._id === result.labTest);
    if (!test) return { status: 'Unknown', color: 'bg-gray-100 text-gray-700' };

    const value = parseFloat(result.resultValue.toString());
    const min = test.normalMin ? parseFloat(test.normalMin.toString()) : undefined;
    const max = test.normalMax ? parseFloat(test.normalMax.toString()) : undefined;

    if (min === undefined || max === undefined) {
      return { status: 'No Range', color: 'bg-gray-100 text-gray-700' };
    }

    if (value < min) {
      return { status: 'Below Normal', color: 'bg-orange-100 text-orange-700' };
    } else if (value > max) {
      return { status: 'Above Normal', color: 'bg-red-100 text-red-700' };
    }

    return { status: 'Normal', color: 'bg-green-100 text-green-700' };
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button
            variant="outline"
            size="icon"
            onClick={() => setLocation('/patients')}
          >
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1 className="text-2xl font-bold">Dossier Patient</h1>
        </div>
        <div className="flex gap-2">
          <GenerateReport patient={patient} />
          <Link href={`/patients/edit/${patient._id}`}>
            <Button variant="outline" className="flex items-center gap-2">
              <Edit className="h-4 w-4" />
              <span>Modifier le profil</span>
            </Button>
          </Link>
        </div>
      </div>

      {/* Patient Info Card */}
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <div className="flex items-center gap-4">
            <AvatarName
              firstName={patient.user.firstName}
              lastName={patient.user.lastName}
              size="lg"
            />
            <div>
              <h2 className="text-2xl font-bold">{patient.user.firstName} {patient.user.lastName}</h2>
              <p className="text-gray-500">{patient.user.email}</p>
            </div>
          </div>
          <Badge variant="secondary" className={`text-lg ${stageColors.bg} ${stageColors.text}`}>
            {patient.ckdStage || 'Stage non défini'}
          </Badge>
        </CardHeader>
        <CardContent className="grid grid-cols-2 gap-4">
          <div>
            <h3 className="font-semibold mb-2">Informations Personnelles</h3>
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="text-gray-500">Date de naissance</span>
                <span>{formatDate(patient.birthDate)} ({age} ans)</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Genre</span>
                <span>{patient.gender === 'M' ? 'Masculin' : 'Féminin'}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Téléphone</span>
                <span>{patient.phone}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Adresse</span>
                <span>{patient.address}</span>
              </div>
            </div>
          </div>
          <div>
            <h3 className="font-semibold mb-2">Informations Médicales</h3>
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="text-gray-500">Médecin traitant</span>
                <span>Dr. {patient.doctor?.user.firstName} {patient.doctor?.user.lastName}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Stade IRC</span>
                <span>{patient.ckdStage || 'Non défini'}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">eGFR</span>
                <span>{patient.lastEgfrValue || 'Non mesuré'}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Protéinurie</span>
                <span>{patient.proteinuriaLevel || 'Non évalué'}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Niveau de risque</span>
                <Badge variant="outline" className={
                  progressionRisk === 'High' ? 'bg-red-50 text-red-700' :
                    progressionRisk === 'Moderate' ? 'bg-yellow-50 text-yellow-700' :
                      'bg-green-50 text-green-700'
                }>
                  {progressionRisk}
                </Badge>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Lab Results Section */}
      <Card>
        <CardHeader>
          <CardTitle>Résultats de Laboratoire</CardTitle>
          <CardDescription>Historique des analyses</CardDescription>
        </CardHeader>
        <CardContent>
          {labResultsLoading ? (
            <div className="flex justify-center p-4">
              <Loader />
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Date</TableHead>
                  <TableHead>Test</TableHead>
                  <TableHead>Résultat</TableHead>
                  <TableHead>Statut</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {labResults?.map((result) => {
                  const test = labTests?.find(t => t._id === result.labTest);
                  const status = getTestStatus(result);
                  return (
                    <TableRow key={result._id}>
                      <TableCell>{formatDate(result.resultDate)}</TableCell>
                      <TableCell>{test?.testName}</TableCell>
                      <TableCell>{result.resultValue} {test?.unit}</TableCell>
                      <TableCell>
                        <Badge className={status.color}>{status.status}</Badge>
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>

      {/* Appointments Section */}
      <Card>
        <CardHeader>
          <CardTitle>Rendez-vous</CardTitle>
          <CardDescription>Historique des consultations</CardDescription>
        </CardHeader>
        <CardContent>
          {appointmentsLoading ? (
            <div className="flex justify-center p-4">
              <Loader />
            </div>
          ) : (
            <div className="space-y-4">
              <h3 className="font-semibold">Prochains rendez-vous</h3>
              {appointments?.filter(a => new Date(a.appointmentDate) >= new Date()).map((appointment) => (
                <div key={appointment._id} className="border rounded-lg p-4">
                  <div className="flex justify-between items-center">
                    <div>
                      <p className="font-semibold">{formatDate(appointment.appointmentDate)} à {formatTime(appointment.appointmentDate)}</p>
                      <p className="text-gray-500">{appointment.purpose}</p>
                    </div>
                    <Badge className={`${getStatusColor(appointment.status).bg} ${getStatusColor(appointment.status).text}`}>
                      {appointment.status}
                    </Badge>
                  </div>
                </div>
              ))}

              <h3 className="font-semibold mt-6">Rendez-vous passés</h3>
              {appointments?.filter(a => new Date(a.appointmentDate) < new Date()).map((appointment) => (
                <div key={appointment._id} className="border rounded-lg p-4">
                  <div className="flex justify-between items-center">
                    <div>
                      <p className="font-semibold">{formatDate(appointment.appointmentDate)} à {formatTime(appointment.appointmentDate)}</p>
                      <p className="text-gray-500">{appointment.purpose}</p>
                    </div>
                    <Badge className={`${getStatusColor(appointment.status).bg} ${getStatusColor(appointment.status).text}`}>
                      {appointment.status}
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>


      {/* Add Lab Result Dialog */}
      <Dialog open={addLabResultDialogOpen} onOpenChange={setAddLabResultDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add Lab Result</DialogTitle>
            <DialogDescription>
              Record a new lab test result for {patient?.user?.firstName} {patient?.user?.lastName}
            </DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="test-type" className="text-right">
                Test Type
              </Label>
              <div className="col-span-3">
                <Select
                  value={labTestId}
                  onValueChange={setLabTestId}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a test" />
                  </SelectTrigger>
                  <SelectContent>
                    {labTests?.map((test) => (
                      <SelectItem key={test._id} value={test._id}>
                        {test.testName}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="result-value" className="text-right">
                Result
              </Label>
              <Input
                id="result-value"
                type="number"
                step="0.01"
                value={resultValue}
                onChange={(e) => setResultValue(e.target.value)}
                className="col-span-3"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="result-date" className="text-right">
                Date
              </Label>
              <Input
                id="result-date"
                type="date"
                value={resultDate}
                onChange={(e) => setResultDate(e.target.value)}
                className="col-span-3"
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setAddLabResultDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleLabResultSubmit} disabled={addLabResultMutation.isPending}>
              {addLabResultMutation.isPending ? (
                <>
                  <Loader color="white" size="sm" className="mr-2" />
                  Saving...
                </>
              ) : (
                'Save Result'
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Add Appointment Dialog */}
      <Dialog open={addAppointmentDialogOpen} onOpenChange={setAddAppointmentDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Schedule Appointment</DialogTitle>
            <DialogDescription>
              Schedule a new appointment for {patient?.user?.firstName} {patient?.user?.lastName}
            </DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4"><Label htmlFor="appointment-date" className="text-right">
                Date
              </Label>
              <Input
                id="appointment-date"
                type="date"
                value={appointmentDate}
                onChange={(e) => setAppointmentDate(e.target.value)}
                className="col-span-3"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="appointment-time" className="text-right">
                Time
              </Label>
              <Input
                id="appointment-time"
                type="time"
                value={appointmentTime}
                onChange={(e) => setAppointmentTime(e.target.value)}
                className="col-span-3"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="doctor" className="text-right">
                Doctor
              </Label>
              <div className="col-span-3">
                <Select
                  value={doctorId}
                  onValueChange={setDoctorId}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a doctor" />
                  </SelectTrigger>
                  <SelectContent>
                    {doctors?.map((doctor) => (
                      <SelectItem key={doctor._id} value={doctor._id}>
                        Dr. {doctor.user.firstName} {doctor.user.lastName} ({doctor.specialty})
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="purpose" className="text-right">
                Purpose
              </Label>
              <Input
                id="purpose"
                placeholder="Consultation, follow-up, etc."
                value={purpose}
                onChange={(e) => setPurpose(e.target.value)}
                className="col-span-3"
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setAddAppointmentDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleAppointmentSubmit} disabled={addAppointmentMutation.isPending}>
              {addAppointmentMutation.isPending ? (
                <>
                  <Loader color="white" size="sm" className="mr-2" />
                  Scheduling...
                </>
              ) : (
                'Schedule Appointment'
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}

// Functions that need access to component state
const handleLabResultSubmit = () => {
  if (!labTestId || !resultValue || !resultDate || !patient?._id) {
    toast({
      title: 'Error',
      description: 'Please fill all required fields',
      variant: 'destructive',
    });
    return;
  }

  addLabResultMutation.mutate({
    patient: patient._id,
    doctor: user?.id,
    labTest: labTestId,
    resultValue: parseFloat(resultValue),
    resultDate
  });
};

const handleAppointmentSubmit = () => {
  if (!appointmentDate || !appointmentTime || !doctorId || !purpose || !patient?._id) {
    toast({
      title: 'Error',
      description: 'Please fill all required fields',
      variant: 'destructive',
    });
    return;
  }

  const dateTime = new Date(`${appointmentDate}T${appointmentTime}`);

  addAppointmentMutation.mutate({
    patientId: patient._id,
    doctorId,
    appointmentDate: dateTime.toISOString(),
    purpose,
    status: 'pending'
  });
};